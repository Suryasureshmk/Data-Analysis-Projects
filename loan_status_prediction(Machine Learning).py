# -*- coding: utf-8 -*-
"""LOAN STATUS PREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mCWwAN-fEbWzS0PG2qBwT04LdG8taWvk

**LOAN STATUS PREDICTION USING MACHINE LEARNING WITH** **PYTHON**
"""

#Importing the dependencies
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Loading the dataset
loan_dataset = pd.read_csv("/content/train_u6lujuX_CVtuZ9i (1).csv")

loan_dataset.head()

loan_dataset.shape

loan_dataset.info()

loan_dataset.isnull().sum()

# Drop rows with missing values
loan_dataset = loan_dataset.dropna()

loan_dataset.isnull().sum()

#data analysis
loan_dataset.describe()

# Label encoding for Loan_Status column
loan_dataset.replace({"Loan_Status": {'N': 0, 'Y': 1}}, inplace=True)

loan_dataset.head()

loan_dataset['Dependents'].value_counts()

# Handle 'Dependents' column
loan_dataset['Dependents'].replace('3+', 4, inplace=True)

loan_dataset['Dependents'].value_counts()

"""DATA VISUALIZATION


"""

#education & loan status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

#marital status & loan status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# Convert categorical columns to numerical values
loan_dataset.replace({'Married': {'No': 0, 'Yes': 1},
                      'Gender': {'Male': 1, 'Female': 0},
                      'Self_Employed': {'No': 0, 'Yes': 1},
                      'Property_Area': {'Rural': 0, 'Semiurban': 1, 'Urban': 2},
                      'Education': {'Graduate': 1, 'Not Graduate': 0}}, inplace=True)

loan_dataset.head()

"""SPLITTING FEATURES AND TARGET

"""

# Separate features and target variable
X = loan_dataset.drop(columns=['Loan_ID', 'Loan_Status'], axis=1)
Y = loan_dataset['Loan_Status']

print(X)

print(Y)

"""TRAIN TEST SPLIT


"""

# Split dataset into train and test sets
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=2)

"""TRAINING THE MODEL



"""

# Create Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the classifier
rf_classifier.fit(x_train, y_train)

"""MODEL EVALUTION

"""

# Predictions on training data
rf_train_predictions = rf_classifier.predict(x_train)
rf_training_data_accuracy = accuracy_score(rf_train_predictions, y_train)

# Predictions on testing data
rf_test_predictions = rf_classifier.predict(x_test)
rf_test_data_accuracy = accuracy_score(rf_test_predictions, y_test)

print("Random Forest Training Data Accuracy:", rf_training_data_accuracy)
print("Random Forest Test Data Accuracy:", rf_test_data_accuracy)

"""BUILDING A PREDICTIVE SYSYEM

"""

# Input data for prediction
input_data = (1,1,1,1,0,12841,10968,349,360,1,1)

# Convert input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make prediction using Random Forest model
rf_prediction = rf_classifier.predict(input_data_reshaped)

# Print prediction
if rf_prediction[0] == 0:
    print('Random Forest Model Prediction: NOT ELIGIBLE FOR LOAN')
elif rf_prediction[0] == 1:
    print('Random Forest Model Prediction: ELIGIBLE FOR LOAN')

"""SAVING THE TRAINED MODEL"""

import pickle

filename='trained_model.sav'
pickle.dump(rf_classifier,open(filename,'wb'))

#loading the saved model
loaded_model=pickle.load(open('trained_model.sav','rb'))

# Input data for prediction
input_data = (1,1,1,1,0,12841,10968,349,360,1,1)

# Convert input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make prediction using Random Forest model
rf_prediction = loaded_model.predict(input_data_reshaped)

# Print prediction
if rf_prediction[0] == 0:
    print('Random Forest Model Prediction: NOT ELIGIBLE FOR LOAN')
elif rf_prediction[0] == 1:
    print('Random Forest Model Prediction: ELIGIBLE FOR LOAN')